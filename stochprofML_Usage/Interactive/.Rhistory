k <- which(i==CN)
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k], sigma= fmeans_B_s[k]), col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k], sigma= fmeans_C_s[k]), col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
i
k
which(i==CN)
xlim_all[k]
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,3))
for(i in CN){
k <- which(i==CN)[1]
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k], sigma= fmeans_B_s[k]), col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k], sigma= fmeans_C_s[k]), col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
par(mfrow=c(1,1))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI)
summary(gamlss_NBI)
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ Cellnumber, sigma.formula =~ Cellnumber  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI)
#sample_annotation_mESC$predlme = predictAll(gamlss_NBI)$y
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
predlme <- exp(predict(gamlss_NBI, newdata = data.frame(Cellnumber = CN)))
newdata <- data.frame(Cellnumber = CN, predlme=predlme)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = newdata, aes(x=Cellnumber, y = predlme),
colour="black", size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI_log)
#sample_annotation_mESC$predlme = predictAll(gamlss_NBI)$y
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
predlme <- exp(predict(gamlss_NBI_log, newdata = data.frame(Cellnumber = CN)))
newdata <- data.frame(Cellnumber = CN, predlme=predlme)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = newdata, aes(x=Cellnumber, y = predlme),
colour="black", size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS: Negative Binomial, log(Cellnumber) ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log_design <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber) +re(random=~1|Design), sigma.formula =~ log(Cellnumber) +re(random=~1|Design) ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI_log_design)
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_log_design))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_A <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
# predlme_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
# predlme_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
# newdata <- data.frame(Cellnumber = CN, predlme_A=predlme_A, predlme_B=predlme_B, predlme_C=predlme_C)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_2$mu.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_2))
ranef(getSmo(gamlss_NBI_2))
gamlss_NBI_log_design$sigma.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_log_design, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_design, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_design, what ="sigma"))
\begin{equation*}
P(Y=y|\mu, \sigma)= \frac{\Gamma \left( \frac{y+1}{\sigma} \right)}{\gamma \left( \frac{1}{\sigma} \right)} \gamma \left( \frac{1}{\sigma}\right) \Gamma (y+1) \left(\frac{(\sigma  \mu)}{ (1+\sigma \mu)} \right)^y \left( \frac{1}{1+\sigma \mu}\right)^{1/\sigma}
\end{equation*}
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50, cache = TRUE)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="C")))
View(sample_annotation_mESC)
sample_annotation_mESC$Date <- "July"
sample_annotation_mESC$Date[(sample_annotation_mESC$Design=="A"|sample_annotation_mESC$Design=="B" )]<-"November"
gamlss_NBI_log_date <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber) +re(random=~1|Date), sigma.formula =~ log(Cellnumber) +re(random=~1|Date) ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_log_date))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_July <- exp(predict(gamlss_NBI_log_design, newdata = data.frame(Cellnumber = CN, Date ="July")))
# predlme_November <- exp(predict(gamlss_NBI_log_design, newdata = data.frame(Cellnumber = CN, Date ="November")))
# newdata <- data.frame(Cellnumber = CN, predlme_July=predlme_July, predlme_November=predlme_November, )
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Date) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Date),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=c(col_Date[2],col_Date[1]))+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log_date$mu.coefSmo[[1]]$coefficients
ranef(getSmo(gamlss_NBI_log_design))
coef(getSmo(gamlss_NBI_log_date))
gamlss_NBI_log_date$sigma.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_log_date, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_date, what ="sigma"))
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,1))
for(i in CN){
k <- which(i==CN)[1]
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_July_mu[k], sigma= fmeans_July_s[k]), col = col_Date[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_November_mu[k], sigma= fmeans_November_s[k]), col = col_Date[2])
legend("topright", legend=c("July", "November"), col=col_Date, lty=1, cex=0.8)
}
stochprofML::: comb.summands
stochprofML:::comb.summands
?stochprofML::comb.summands
??stochprofML::comb.summands
??stochprofML:::comb.summands
install.packages("devtools")
install_github("fichslab/stochprofML")
install_github("fuchslab/stochprofML")
library(devtools)
install_github("fuchslab/stochprofML")
library(stochprofML)
stochprofML:::comb.summands()
stochprofML:::comb.summands(5,3)
stochprofML:::comb.summands(5,2)
install.packages("umap")
install.packages("sva")
install.packages("sva")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
ggplot(data=sample_annotation_mESC_AB, aes(x=Cellnumber , y = TotalUMIs_DS_dG, col = Date)) +
ggtitle("Linear regression for design A and B") +
geom_point(mapping = aes(col = Date)) +
labs(y="Total UMIs", col ="Design") +
scale_color_manual(values=col_Date)+
geom_smooth(method = lm,se=FALSE)
install.packages(""broom.mixed"")
install.packages(broom.mixed)
install.packages("broom.mixed")
library("broom.mixed")
?lmer
??lmer
d <- readRDS("J:/190905Backup/Eigene Dokumente/Thesis/Notizen/2018_NB_Overleaf/Probability_distributions_for_single-cell_mRNA_counts/RealWorldData/Nestorowa/Nestorowa.rds")
id <- "Rn18s-rs5"
install_github("fuchslab/scModels/tree/createPIG")
library(devtools)
install_github("fuchslab/scModels/tree/createPIG")
install_github("fuchslab/scModels", ref"createPIG")
install_github("fuchslab/scModels", ref="createPIG")
stochprofML::stochasticProfilingData()
set.seed(2020)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.52, 0.48)
mu <- c(0.09,-1.48)
sigma <- 0.02
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.52, 0.48)
mu <- c(0.09,-1.48)
sigma <- 0.02
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.62, 0.38)
mu <- c(0.47, -0.87)
sigma <- 0.03
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
gen_LNLN
#setwd("C:/Users/lisa.amrhein/Documents/stochProfML/Simulationsstudien")
setwd("J:/StochProfPaper/Pics/Code")
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.62, 0.38)
mu <- c(0.47, -0.87)
sigma <- 0.03
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
pdf(paste0( "Simulated_Gene.pdf"),  width = 7, height = 4)
x <- seq(round(min(gen_LNLN)), round(max(gen_LNLN)),
(round(max(gen_LNLN)) - round(min(gen_LNLN))) / 500)
y <- d.sum.of.mixtures.LNLN(x, n, p, mu,rep(sigma,TY), logdens=F)
hist(gen_LNLN, main = paste("Simulated Gene"), breaks = 50,
xlab = "Sum of mixtures of lognormals", ylab = "Density",
freq = F, col = "lightgrey")
lines(x,y,col="blue",lwd=3)
dev.off()
set.seed(20)
result <- stochprof.loop("LN-LN", matrix(gen_LNLN,ncol = 1), n, TY,
genenames = "SimGene", fix.mu = F, loops = 10,
until.convergence=F, print.output = F, show.plots = T,
plot.title = "Simulated Gene",	use.constraints = F)
set.seed(20)
result <- stochprof.loop("LN-LN", matrix(gen_LNLN,ncol = 1), n, TY,
genenames = "SimGene", fix.mu = F, loops = 10,
until.convergence=F, print.output = F, show.plots = T,
plot.title = "Simulated Gene",	use.constraints = F)
set.seed(20)
stochasticProfilingML()
setwd("D:/Users/lisa.amrhein/Documents")
set.seed(20)
stochasticProfilingML()
set.seed(20)
stochasticProfilingML()
set.seed(20)
stochasticProfilingML()
matrix(c(2,2,3,3),nco=2)
matrix(c(2,2,3,3),nco=2)^c(1,2,3,4,5,6,7,8)
c(2,2,3,3)^c(1,2,3,4,5,6,7,8)
c(1,1,2,2)^c(1,2,3,4,5,6,7,8)
matrix(c(2,2,3,3),ncol=2)*matrix(c(2,2,3,3),ncol=2)
matrix(c(2,2,3,3),ncol=2)%*%matrix(c(2,2,3,3),ncol=2)
library(stochprofML)
?stochasticProfilingML()
stochasticProfilingML()
setwd("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Overlap")
library(MASS)
source("OVL_LN_LN.R")
# 60 und 200
n1 <- 60
n2 <- 200
# 60 und 60
n3 <- 60
n4 <- 60
par(mfrow=c(1,2))
repeat_I <- 1000
mu_A_D <- 2.1
mu_B_D <- 2.03
sigma_A_D <- 0.19
sigma_B_D <- 0.2
OVL_D <- OVL_LN_LN(mu_A_D, mu_B_D, sigma_A_D, sigma_B_D)
# generate new Datasets
A_D_1 <- list()
B_D_1 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_1[[i]] <- rlnorm(n1, meanlog = mean(mu_A_D, mu_B_D), sdlog = mean(sigma_A_D,sigma_B_D))
B_D_1[[i]] <- rlnorm(n2, meanlog = mean(mu_A_D, mu_B_D), sdlog = mean(sigma_A_D,sigma_B_D))
}
# fit Parameter for each dataset
Para_A_D_1 <- list()
Para_B_D_1 <- list()
set.seed(943)
(mu_A_D
)
mu_B_D
mean(mu_A_D, mu_B_D)
set.seed(940)
for(i in 1:repeat_I){
A_D_1[[i]] <- rlnorm(n1, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_1[[i]] <- rlnorm(n2, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_1 <- list()
Para_B_D_1 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_1[[i]] <-fitdistr(A_D_1[[i]],"lognormal")$estimate
Para_B_D_1[[i]] <-fitdistr(B_D_1[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_1_all <- c()
for(i in 1:repeat_I){
OVL_D_1_all[i]<-OVL_LN_LN(Para_A_D_1[[i]][1],Para_B_D_1[[i]][1], Para_A_D_1[[i]][2], Para_B_D_1[[i]][2])
}
Sort_OVL_D_1 <- sort(OVL_D_1_all)
OVL_D_1_95 <- Sort_OVL_D_1[round(length(Sort_OVL_D_1)-length(Sort_OVL_D_1)*0.95)]
hist_D_1 <- hist(OVL_D_1_all,breaks = 100, plot = FALSE)
hist(OVL_D_1_all,breaks = 100, col = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))), border = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))),
xlab = "Overlap", main ="60 and 200 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
# generate new Datasets
A_D_2 <- list()
B_D_2 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_2[[i]] <- rlnorm(n3, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_2[[i]] <- rlnorm(n4, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_2 <- list()
Para_B_D_2 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_2[[i]] <-fitdistr(A_D_2[[i]],"lognormal")$estimate
Para_B_D_2[[i]] <-fitdistr(B_D_2[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_2_all <- c()
for(i in 1:repeat_I){
OVL_D_2_all[i]<-OVL_LN_LN(Para_A_D_2[[i]][1],Para_B_D_2[[i]][1], Para_A_D_2[[i]][2], Para_B_D_2[[i]][2])
}
Sort_OVL_D_2 <- sort(OVL_D_2_all)
OVL_D_2_95 <- Sort_OVL_D_2[round(length(Sort_OVL_D_2)-length(Sort_OVL_D_2)*0.95)]
hist_D_2 <- hist(OVL_D_2_all,breaks = 100, plot = FALSE)
hist(OVL_D_2_all,breaks = 100, col = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))), border = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))),
xlab = "Overlap", main ="60 and 60 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
library(MASS)
source("OVL_LN_LN.R")
# 60 und 200
n1 <- 60
n2 <- 200
# 60 und 60
n3 <- 60
n4 <- 60
pdf("Overlap_D.pdf",  width = 12, height = 3)
par(mfrow=c(1,2))
repeat_I <- 1000
# Case D_60_200
mu_A_D <- 2.1
mu_B_D <- 2.03
sigma_A_D <- 0.19
sigma_B_D <- 0.2
OVL_D <- OVL_LN_LN(mu_A_D, mu_B_D, sigma_A_D, sigma_B_D)
# generate new Datasets
A_D_1 <- list()
B_D_1 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_1[[i]] <- rlnorm(n1, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_1[[i]] <- rlnorm(n2, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_1 <- list()
Para_B_D_1 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_1[[i]] <-fitdistr(A_D_1[[i]],"lognormal")$estimate
Para_B_D_1[[i]] <-fitdistr(B_D_1[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_1_all <- c()
for(i in 1:repeat_I){
OVL_D_1_all[i]<-OVL_LN_LN(Para_A_D_1[[i]][1],Para_B_D_1[[i]][1], Para_A_D_1[[i]][2], Para_B_D_1[[i]][2])
}
Sort_OVL_D_1 <- sort(OVL_D_1_all)
OVL_D_1_95 <- Sort_OVL_D_1[round(length(Sort_OVL_D_1)-length(Sort_OVL_D_1)*0.95)]
hist_D_1 <- hist(OVL_D_1_all,breaks = 100, plot = FALSE)
hist(OVL_D_1_all,breaks = 100, col = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))), border = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))),
xlab = "Overlap", main ="60 and 200 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
# Case D_60_60
# generate new Datasets
A_D_2 <- list()
B_D_2 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_2[[i]] <- rlnorm(n3, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_2[[i]] <- rlnorm(n4, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_2 <- list()
Para_B_D_2 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_2[[i]] <-fitdistr(A_D_2[[i]],"lognormal")$estimate
Para_B_D_2[[i]] <-fitdistr(B_D_2[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_2_all <- c()
for(i in 1:repeat_I){
OVL_D_2_all[i]<-OVL_LN_LN(Para_A_D_2[[i]][1],Para_B_D_2[[i]][1], Para_A_D_2[[i]][2], Para_B_D_2[[i]][2])
}
Sort_OVL_D_2 <- sort(OVL_D_2_all)
OVL_D_2_95 <- Sort_OVL_D_2[round(length(Sort_OVL_D_2)-length(Sort_OVL_D_2)*0.95)]
hist_D_2 <- hist(OVL_D_2_all,breaks = 100, plot = FALSE)
hist(OVL_D_2_all,breaks = 100, col = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))), border = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))),
xlab = "Overlap", main ="60 and 60 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
dev.off()
# general assumptions:
# Parameters of Population A are based on 50 10-cell samples,
# In there, Population A got an estimated fraction of p_A = 12%.
# Thus these parameters are based on ca. 60 cells.
# Parameters of Population B are based on 100 10-cell samples,
# In there, Population B got an estimated fraction of p_B = 20%.
# Thus these parameters are based on ca. 100 cells.
library(MASS)
source("OVL_LN_LN.R")
# 60 und 200
n1 <- 60
n2 <- 200
# 60 und 60
n3 <- 60
n4 <- 60
pdf("Overlap_D.pdf",  width = 12, height = 3)
par(mfrow=c(1,2))
repeat_I <- 1000
# Case D_60_200
mu_A_D <- 2.1
mu_B_D <- 2.03
sigma_A_D <- 0.19
sigma_B_D <- 0.2
OVL_D <- OVL_LN_LN(mu_A_D, mu_B_D, sigma_A_D, sigma_B_D)
# generate new Datasets
A_D_1 <- list()
B_D_1 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_1[[i]] <- rlnorm(n1, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_1[[i]] <- rlnorm(n2, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_1 <- list()
Para_B_D_1 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_1[[i]] <-fitdistr(A_D_1[[i]],"lognormal")$estimate
Para_B_D_1[[i]] <-fitdistr(B_D_1[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_1_all <- c()
for(i in 1:repeat_I){
OVL_D_1_all[i]<-OVL_LN_LN(Para_A_D_1[[i]][1],Para_B_D_1[[i]][1], Para_A_D_1[[i]][2], Para_B_D_1[[i]][2])
}
Sort_OVL_D_1 <- sort(OVL_D_1_all)
OVL_D_1_95 <- Sort_OVL_D_1[round(length(Sort_OVL_D_1)-length(Sort_OVL_D_1)*0.95)]
hist_D_1 <- hist(OVL_D_1_all,breaks = 100, plot = FALSE)
hist(OVL_D_1_all,breaks = 100, col = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))), border = c(rep("grey",sum(hist_D_1$breaks<OVL_D_1_95)), rep("black",sum(hist_D_1$breaks>=OVL_D_1_95))),
xlab = "Overlap", main ="60 and 200 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
# Case D_60_60
# generate new Datasets
A_D_2 <- list()
B_D_2 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_2[[i]] <- rlnorm(n3, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
B_D_2[[i]] <- rlnorm(n4, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D,sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_2 <- list()
Para_B_D_2 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_2[[i]] <-fitdistr(A_D_2[[i]],"lognormal")$estimate
Para_B_D_2[[i]] <-fitdistr(B_D_2[[i]],"lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_2_all <- c()
for(i in 1:repeat_I){
OVL_D_2_all[i]<-OVL_LN_LN(Para_A_D_2[[i]][1],Para_B_D_2[[i]][1], Para_A_D_2[[i]][2], Para_B_D_2[[i]][2])
}
Sort_OVL_D_2 <- sort(OVL_D_2_all)
OVL_D_2_95 <- Sort_OVL_D_2[round(length(Sort_OVL_D_2)-length(Sort_OVL_D_2)*0.95)]
hist_D_2 <- hist(OVL_D_2_all,breaks = 100, plot = FALSE)
hist(OVL_D_2_all,breaks = 100, col = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))), border = c(rep("grey",sum(hist_D_2$breaks<OVL_D_2_95)), rep("black",sum(hist_D_2$breaks>=OVL_D_2_95))),
xlab = "Overlap", main ="60 and 60 single-cells")
lines(x=rep(OVL_D,2), y=c(0,1000), col = "#89BBBF", lwd= 3)
dev.off()
#Interactive Function for parameter estimation
library(stochprofML)
set.seed(20)
stochasticProfilingML()
setwd("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/stochprofML_Usage/Interactive")
#Interactive Function for parameter estimation
library(stochprofML)
set.seed(20)
stochasticProfilingML()
