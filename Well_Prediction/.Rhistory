axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_2_all.rda")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(c("Measurement 1","Measurement 2","Measurement 3","Measurement 4","Measurement 5","Measurement 6"),11),2),"Nr_Pop1"=rep(sort(rep(0:10,6)),2), "Method"=sort(rep(c(1,2),66)),"True_CN"=rep( N.matrix[1:6,1],22),"Pred_Truth"=(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22)), "Fill" =paste(sort(rep(c(1,2),66)),"_",(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
ggplot(dt_new, aes(Nr_Pop1,Prob,fill=as.factor(Method), col =fill_new, size = fill_new))+
geom_bar(position="dodge",stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:10,labels = 0:10)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_1_all.rda")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(c("Measurement 1","Measurement 2","Measurement 3","Measurement 4","Measurement 5","Measurement 6"),6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p1<- ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_2_all.rda")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(c("Measurement 1","Measurement 2","Measurement 3","Measurement 4","Measurement 5","Measurement 6"),11),2),"Nr_Pop1"=rep(sort(rep(0:10,6)),2), "Method"=sort(rep(c(1,2),66)),"True_CN"=rep( N.matrix[1:6,1],22),"Pred_Truth"=(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22)), "Fill" =paste(sort(rep(c(1,2),66)),"_",(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p2 <- ggplot(dt_new, aes(Nr_Pop1,Prob,fill=as.factor(Method), col =fill_new, size = fill_new))+
geom_bar(position="dodge",stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:10,labels = 0:10)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
pdf(paste0( "ConDensHistos_Wellprediction_12_border.pdf"),  width = 14, height = 11)
plot_grid(p1, p2, align = "h", ncol = 2, rel_widths = c(1.2, 2), labels = c("AUTO"), label_size = 24)
dev.off()
head(dt_new)
ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with", subtitle = paste(Obs))+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_2_all.rda")
load("Dataset_1_all.rda")
dt <- data.frame(c("estimated Parameter","original Parameter with p"), c(True.predictions_wp[i],True.predictions.orig_wp[i]), c(paste(bquote(.(True.predictions.MLE_wp[i]))," (",bquote(.(True.predictions.MLE_HPI_wp[i])) ,")", sep=""),paste(bquote(.(True.predictions.MLE.orig_wp[i]))," (",bquote(.(True.predictions.MLE_HPI.orig_wp[i])) ,")", sep="") )
)
load("Dataset_1_all.rda")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(c("Measurement 1","Measurement 2","Measurement 3","Measurement 4","Measurement 5","Measurement 6"),6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
load("Dataset_1_all.rda")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(c("Measurement 1","Measurement 2","Measurement 3","Measurement 4","Measurement 5","Measurement 6"),6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
dim(dataste)
dim(dataset)
dataset[1,1:6]
paste("Measurement ",1, ": y=", bquote(dataset[1,1]))
paste("Measurement ",1, ": y=", bquote(.(dataset[1,1])))
paste("Measurement ",1, ": y=", bquote(.(round(dataset[1,1],2))))
paste("Measurement",1, ": y=", bquote(.(round(dataset[1,1],2))))
?paste
paste("Measurement",1, ": y=", bquote(.(round(dataset[1,1],2))), sep ="")
paste("Measurement ",1, ": y = ", bquote(.(round(dataset[1,1],2))), sep ="")
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dataset[1,i]
for(i in 1:6) {
count<-dataset[1,i]
title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(count,2))), sep ="")}
count
round(count,2)
for(i in 1:6) {
count<-round(dataset[1,i],2)
title[i]<-paste("Measurement ",i, ": y = ", bquote(.(count)), sep ="")}
i
paste("Measurement ",i, ": y = ", bquote(.(count)), sep ="")
title <- c()
for(i in 1:6) {
count<-round(dataset[1,i],2)
title[i]<-paste("Measurement ",i, ": y = ", bquote(.(count)), sep ="")}
title
for(i in 1:6) {
title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")}
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
title
load("Dataset_1_all.rda")
title <- c()
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(title,6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_1_all.rda")
title <- c()
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(title,6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p1<- ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_2_all.rda")
title <- c()
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(title,11),2),"Nr_Pop1"=rep(sort(rep(0:10,6)),2), "Method"=sort(rep(c(1,2),66)),"True_CN"=rep( N.matrix[1:6,1],22),"Pred_Truth"=(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22)), "Fill" =paste(sort(rep(c(1,2),66)),"_",(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p2 <- ggplot(dt_new, aes(Nr_Pop1,Prob,fill=as.factor(Method), col =fill_new, size = fill_new))+
geom_bar(position="dodge",stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:10,labels = 0:10)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
pdf(paste0( "ConDensHistos_Wellprediction_12_border.pdf"),  width = 14, height = 11)
plot_grid(p1, p2, align = "h", ncol = 2, rel_widths = c(1.2, 2), labels = c("AUTO"), label_size = 24)
dev.off()
load("Dataset_1_all.rda")
title <- c()
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(title,6),2),"Nr_Pop1"=rep(sort(rep(0:5,6)),4), "Method"=sort(rep(c(1,2),36)),"True_CN"=rep( N.matrix[1:6,1],12),"Pred_Truth"=(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12)), "Fill" =paste(sort(rep(c(1,2),36)),"_",(rep(sort(rep(0:5,6)),4)==rep( N.matrix[1:6,1],12))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p1<- ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
load("Dataset_2_all.rda")
title <- c()
for(i in 1:6) title[i]<-paste("Measurement ",i, ": y = ", bquote(.(round(dataset[1,i],2))), sep ="")
dt_new <- data.frame("Prob"=c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6,],cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),"Obs"= rep(rep(title,11),2),"Nr_Pop1"=rep(sort(rep(0:10,6)),2), "Method"=sort(rep(c(1,2),66)),"True_CN"=rep( N.matrix[1:6,1],22),"Pred_Truth"=(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22)), "Fill" =paste(sort(rep(c(1,2),66)),"_",(rep(sort(rep(0:10,6)),2)==rep( N.matrix[1:6,1],22))))
dt_new$fill_new <- as.factor(c( "estimated parameters","true composition", "true parameters", "true composition")[dt_new$Fill])
p2 <- ggplot(dt_new, aes(Nr_Pop1,Prob,fill=as.factor(Method), col =fill_new, size = fill_new))+
geom_bar(position="dodge",stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(2)],"#000000",brewer.pal(n = 8, name = "Paired")[c(8)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(2,8)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:10,labels = 0:10)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
pdf(paste0( "ConDensHistos_Wellprediction_12_border.pdf"),  width = 14, height = 11)
plot_grid(p1, p2, align = "h", ncol = 2, rel_widths = c(1.2, 2), labels = c("AUTO"), label_size = 24)
dev.off()
ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new ))+
geom_bar(position="dodge", stat="identity")+
scale_size_manual(values= c(0.5,1.5,0.5))+
scale_colour_manual(values= c(brewer.pal(n = 8, name = "Paired")[c(1)],"#000000",brewer.pal(n = 8, name = "Paired")[c(7)],"#000000"))+
scale_fill_manual(values= brewer.pal(n = 8, name = "Paired")[c(1,7)], labels=c("estimated parameters", "true parameters"))+
ylab("Conditional probability")+
xlab("# cells of population 1")+
labs(fill="Prediction with")+
scale_x_continuous(breaks=0:5,labels = 0:5)+
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
strip.text.x = element_text(size =14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour="white", fill="white")) +
facet_wrap(~Obs, nrow = 6)
c(brewer.pal(n = 8, name = "Paired")[c(1)]
)
c(brewer.pal(n = 8, name = "Paired")[c(2)])
install.packages("patternplot")
patternbar(dt_new, Nr_Pop1, Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1")
library(patternplot)
patternbar(dt_new, Nr_Pop1, Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1")
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1")
pattern.color=c('black','black', 'black','black','black', 'black')
background.color=c('white','white', 'white','white','white', 'white')
density<-c(20, 20, 10,20,20,20)
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1",
pattern.type=pattern.type, hjust=0.5,
pattern.color=pattern.color, background.color=background.color,pattern.line.size=c(5.5, 1, 4))
pattern.type<-c('hdashes', 'blank', 'crosshatch','hdashes', 'blank', 'crosshatch')
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1",
pattern.type=pattern.type, hjust=0.5,
pattern.color=pattern.color, background.color=background.color,pattern.line.size=c(5.5, 1, 4))
pattern.type<-c('hdashes', 'hdashes', 'crosshatch','hdashes', 'hdashes', 'crosshatch')
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1",
pattern.type=pattern.type, hjust=0.5,
pattern.color=pattern.color, background.color=background.color,pattern.line.size=c(5.5, 1, 4))
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1",
pattern.type=pattern.type, hjust=0.5,
pattern.color=pattern.color, background.color=background.color,pattern.line.size=c(5.5, 1, 4,5.5, 1, 4))
patternbar()
patternbar
g <- g + theme_bw() + xlab(xlab) + ylab(ylab) + scale_x_continuous(breaks = seq(1:length(levels(x))),
labels = levels(x)) + geom_text(data = ldata, aes(x,
y, label = label), vjust = vjust, hjust = hjust,
size = label.size)
?pattern
pattern()
x<-pattern()
x
pattern(type = "bricks", density = 8, pattern.line.size = 10,
color = "black", background.color = "white", pixel = 5, res = 30)
x<-pattern(type = "bricks", density = 8, pattern.line.size = 10,
color = "black", background.color = "white", pixel = 5, res = 30)
x
i <- 1
suppressWarnings(pattern(type = pattern.type[i],
density = density[i], color = pattern.color[i],
pattern.line.size = pattern.line.size[i], background.color = background.color[i],
pixel = pixel, res = pixel))
picel = 10
pixel = 10
suppressWarnings(pattern(type = pattern.type[i],
density = density[i], color = pattern.color[i],
pattern.line.size = pattern.line.size[i], background.color = background.color[i],
pixel = pixel, res = pixel))
pattern.line.size = rep(5,6)
suppressWarnings(pattern(type = pattern.type[i],
density = density[i], color = pattern.color[i],
pattern.line.size = pattern.line.size[i], background.color = background.color[i],
pixel = pixel, res = pixel))
pattern
?gsub
gsub("\\\\\\\\", "/", tempdir())
patternbar(dt_new, dt_new$Nr_Pop1, dt_new$Prob, group = NULL, ylab = "Conditional probability", xlab = "# cells of population 1",
pattern.type=pattern.type, hjust=0.5,
pattern.color=pattern.color, background.color=background.color,pattern.line.size=c(5.5, 1, 4,5.5, 1, 4))
104.45-35-34.39-11.85-23.21
362.36-35-34.39-11.85-23.21
256.87-257.91
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
N_anzahl <- 1000
fracPop <- c(0.2, 0.8)
theta <- fracPop
alpha <- c(20, 70)
prob <- c(0.1, 0.4)
beta <- prob / (1-prob)
N <- 2
Pop <- length(fracPop)
set.seed(234)
y1 <- c()
y2 <- c()
for(i in 1 : N_anzahl){
u <- runif(1, 0, 1)
whichPop <- if(u < fracPop[1]) 1 else if (u < (sum(fracPop[1:2]))) 2 else 3
y1[i] <- rnbinom(1, size = alpha[whichPop], prob = prob[whichPop])
u <- runif(1, 0, 1)
whichPop <- if(u < fracPop[1]) 1 else if (u < (sum(fracPop[1:2]))) 2 else 3
y2[i]<-rnbinom(1, size=alpha[whichPop], prob=prob[whichPop])
}
y <- y1+y2
fit_1000_10_2_1000_2_2020_02_25_singlecell2 <- readRDS(file= "D:/Users/lisa.amrhein/ICB/Rstan_Setup_Test/singleCell/serverResults/2020_02_25/fit_1000_10_2_1000_2_2020_02_25_singlecell2.rds")
a <- get_elapsed_time(fit_1000_10_2_1000_2_2020_02_25_singlecell2)
a <- rbind(a, mean = colMeans(a))
knitr::kable(a, caption = "Sampling time in seconds")
check_hmc_diagnostics(fit_1000_10_2_1000_2_2020_02_25_singlecell2)
get_bfmi(fit_1000_10_2_1000_2_2020_02_25_singlecell2)
print(fit_1000_10_2_1000_2_2020_02_25_singlecell2,
probs = c(0.025, 0.975), digits = 3)
a <- summary(fit_1000_10_2_1000_2_2020_02_25_singlecell2,
digits = 3)$summary
stan_plot_color <- "lightblue2"
show_dens <- TRUE
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "alpha[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = alpha[1], linetype="dashed") +
geom_vline(xintercept = a["alpha[1]",1])
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "alpha[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = alpha[2], linetype="dashed") +
geom_vline(xintercept = a["alpha[2]",1])
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "beta[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = beta[1], linetype="dashed") +
geom_vline(xintercept = a["beta[1]",1])
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "beta[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = beta[2], linetype="dashed") +
geom_vline(xintercept = a["beta[2]",1])
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "theta[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = theta[1], linetype="dashed") +
geom_vline(xintercept = a["theta[1]",1])
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "theta[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = theta[2], linetype="dashed") +
geom_vline(xintercept = a["theta[2]",1])
traceplot(fit_1000_10_2_1000_2_2020_02_25_singlecell2,
inc_warmup = TRUE, ncol = 2)
traceplot(fit_1000_10_2_1000_2_2020_02_25_singlecell2,
inc_warmup = FALSE, nrow = 2)
pairs(fit_1000_10_2_1000_2_2020_02_25_singlecell2,
las = 1)
stan_plot(fit_1000_10_2_1000_2_2020_02_25_singlecell2, pars = "alpha[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = alpha[1], linetype="dashed") +
geom_vline(xintercept = a["alpha[1]",1])
alpha[1]
a
a["alpha[1]",1]
theta
stan_version()
sessionInfo()
Sys.info()
fit_1000_100_2_1000_2_2020_02_25_singlecell2 <- readRDS(file= "D:/Users/lisa.amrhein/ICB/Rstan_Setup_Test/singleCell/serverResults/2020_02_25/fit_1000_100_2_1000_2_2020_02_25_singlecell2.rds")
a <- get_elapsed_time(fit_1000_100_2_1000_2_2020_02_25_singlecell2)
a <- rbind(a, mean = colMeans(a))
knitr::kable(a, caption = "Sampling time in seconds")
check_hmc_diagnostics(fit_1000_100_2_1000_2_2020_02_25_singlecell2)
get_bfmi(fit_1000_100_2_1000_2_2020_02_25_singlecell2)
print(fit_1000_100_2_1000_2_2020_02_25_singlecell2,
probs = c(0.025, 0.975), digits = 3)
a <- summary(fit_1000_100_2_1000_2_2020_02_25_singlecell2,
digits = 3)$summary
stan_plot_color <- "lightblue2"
show_dens <- TRUE
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "alpha[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = alpha[1], linetype="dashed") +
geom_vline(xintercept = a["alpha[1]",1])
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "alpha[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = alpha[2], linetype="dashed") +
geom_vline(xintercept = a["alpha[2]",1])
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "beta[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = beta[1], linetype="dashed") +
geom_vline(xintercept = a["beta[1]",1])
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "beta[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = beta[2], linetype="dashed") +
geom_vline(xintercept = a["beta[2]",1])
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "theta[1]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = theta[1], linetype="dashed") +
geom_vline(xintercept = a["theta[1]",1])
stan_plot(fit_1000_100_2_1000_2_2020_02_25_singlecell2, pars = "theta[2]",
fill_color = stan_plot_color, show_density = show_dens, ci_level = .95, outer_level = 1) +
geom_vline(xintercept = theta[2], linetype="dashed") +
geom_vline(xintercept = a["theta[2]",1])
traceplot(fit_1000_100_2_1000_2_2020_02_25_singlecell2,
inc_warmup = TRUE, ncol = 2)
traceplot(fit_1000_100_2_1000_2_2020_02_25_singlecell2,
inc_warmup = FALSE, nrow = 2)
pairs(fit_1000_100_2_1000_2_2020_02_25_singlecell2,
las = 1)
stan_version()
sessionInfo()
Sys.info()
library(rstan)
library(stochprofML)
mix.d.sum.of.mixtures.LNLN
dnorm(1:3,mea=0)
dnorm(1:3)
dnorm(1:3,mea=3)
dnorm(1:3,mea=7)
dnorm(1:3,mea=10)
dnorm(1:3,mean=10)
rnorm(1:3,mean=10)
rnorm(1:3,me=10)
install.packages("stochprofML")
