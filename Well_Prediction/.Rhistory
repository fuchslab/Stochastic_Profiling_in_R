# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_A <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
# predlme_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
# predlme_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
# newdata <- data.frame(Cellnumber = CN, predlme_A=predlme_A, predlme_B=predlme_B, predlme_C=predlme_C)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A <- exp(predict(gamlss_NBI_2, what = c("mu", "sigma"), newdata = data.frame(Cellnumber = CN, Design ="A")))
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A <- exp(predict(gamlss_NBI_2, what = c("mu"), newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, what = c("mu"), newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, what = "mu", newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_C_mu
fmeans_A_mu
fmeans_B_mu
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_mu
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_s
fmeans_B_s
dt <- data.frame( CN,
format(round(fmeans_A,0),big.mark=","),
format(round(fmeans_A,0),big.mark=","),
format(round(fmeans_B,0),big.mark=","),
format(round(fmeans_C,0),big.mark=","))
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,0),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,0),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=","))
format(round(fmeans_C_s,0),big.mark=","))
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,0),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,0),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=",")
format(round(fmeans_C_s,0),big.mark=","))
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,0),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,0),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=","),
format(round(fmeans_C_s,0),big.mark=","))
names(dt)<- c("Cellnumber", "Mu, Design A","Sigma, Design A","Mu, Design B","Sigma, Design B","Mu, Design C","Sigma, Design C")
kable(dt)
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,2),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,2),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=","),
format(round(fmeans_C_s,2),big.mark=","))
names(dt)<- c("Cellnumber", "Mu, Design A","Sigma, Design A","Mu, Design B","Sigma, Design B","Mu, Design C","Sigma, Design C")
kable(dt)
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,3),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,3),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=","),
format(round(fmeans_C_s,3),big.mark=","))
names(dt)<- c("Cellnumber", "Mu, Design A","Sigma, Design A","Mu, Design B","Sigma, Design B","Mu, Design C","Sigma, Design C")
kable(dt)
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,3))
for(i in CN){
k <- which(i==CN)
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k]), sigma= fmeans_B_s[k], col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k]), sigma= fmeans_C_s[k], col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,3))
for(i in CN){
k <- which(i==CN)
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k], sigma= fmeans_B_s[k]), col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k], sigma= fmeans_C_s[k]), col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
par(mfrow=c(1,1))
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_2))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_A <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
# predlme_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
# predlme_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
# newdata <- data.frame(Cellnumber = CN, predlme_A=predlme_A, predlme_B=predlme_B, predlme_C=predlme_C)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
#library(MASS)
library(knitr)
library(devtools)
library(tidyr)
library(magrittr)
library(viridis)
library(gamlss)
load("C:/Users/lisa.amrhein/Documents/Daten Enard/Downsampling/Data/DS_dG_mESC.rda")
col_Date <- c(rgb(0,62,110,maxColorValue = 255),rgb(222,205,135,maxColorValue = 255))
col_Design <- c(rgb(187,224,227,maxColorValue = 255), rgb(116,149,152,maxColorValue = 255), rgb(0,62,110,maxColorValue = 255))
cellnumbers_all<-c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
#for getting a color vector
plotColor <- magma(15,begin = 0.3)
sample_annotation_mESC<-sample_annotation_mESC[!is.na(sample_annotation_mESC$TotalUMIs_DS_dG),]
ggplot(data=sample_annotation_mESC) +
ggtitle("Total UMIs after DS and merging") +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design)) +labs(y="Total UMIs", col ="Design") +
scale_color_manual(values=col_Design)
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI)
#sample_annotation_mESC$predlme = predictAll(gamlss_NBI)$y
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
predlme <- exp(predict(gamlss_NBI, newdata = data.frame(Cellnumber = CN)))
newdata <- data.frame(Cellnumber = CN, predlme=predlme)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = newdata, aes(x=Cellnumber, y = predlme),
colour="black", size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_2 <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber) +re(random=~1|Design), sigma.formula =~ log(Cellnumber) +re(random=~1|Design) ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI_2)
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_2))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_A <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
# predlme_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
# predlme_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
# newdata <- data.frame(Cellnumber = CN, predlme_A=predlme_A, predlme_B=predlme_B, predlme_C=predlme_C)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_2$mu.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_2))
ranef(getSmo(gamlss_NBI_2))
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50, cache = TRUE)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="C")))
dt <- data.frame( CN,
format(round(fmeans_A_mu,0),big.mark=","),
format(round(fmeans_A_s,3),big.mark=","),
format(round(fmeans_B_mu,0),big.mark=","),
format(round(fmeans_B_s,3),big.mark=","),
format(round(fmeans_C_mu,0),big.mark=","),
format(round(fmeans_C_s,3),big.mark=","))
names(dt)<- c("Cellnumber", "Mu, Design A","Sigma, Design A","Mu, Design B","Sigma, Design B","Mu, Design C","Sigma, Design C")
kable(dt)
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,3))
for(i in CN){
k <- which(i==CN)
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k], sigma= fmeans_B_s[k]), col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k], sigma= fmeans_C_s[k]), col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
i
k
which(i==CN)
xlim_all[k]
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,3))
for(i in CN){
k <- which(i==CN)[1]
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_A_mu[k], sigma= fmeans_A_s[k]), col = col_Design[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_B_mu[k], sigma= fmeans_B_s[k]), col = col_Design[2])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_C_mu[k], sigma= fmeans_C_s[k]), col = col_Design[3])
legend("topright", legend=c("A", "B", "C"), col=col_Design, lty=1, cex=0.8)
}
par(mfrow=c(1,1))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI)
summary(gamlss_NBI)
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
gamlss_NBI <-gamlss(TotalUMIs_DS_dG ~ Cellnumber, sigma.formula =~ Cellnumber  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI)
#sample_annotation_mESC$predlme = predictAll(gamlss_NBI)$y
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
predlme <- exp(predict(gamlss_NBI, newdata = data.frame(Cellnumber = CN)))
newdata <- data.frame(Cellnumber = CN, predlme=predlme)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = newdata, aes(x=Cellnumber, y = predlme),
colour="black", size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber), sigma.formula =~ log(Cellnumber)  ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI_log)
#sample_annotation_mESC$predlme = predictAll(gamlss_NBI)$y
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
predlme <- exp(predict(gamlss_NBI_log, newdata = data.frame(Cellnumber = CN)))
newdata <- data.frame(Cellnumber = CN, predlme=predlme)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = newdata, aes(x=Cellnumber, y = predlme),
colour="black", size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS: Negative Binomial, log(Cellnumber) ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log_design <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber) +re(random=~1|Design), sigma.formula =~ log(Cellnumber) +re(random=~1|Design) ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
summary(gamlss_NBI_log_design)
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_log_design))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_A <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
# predlme_B <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
# predlme_C <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
# newdata <- data.frame(Cellnumber = CN, predlme_A=predlme_A, predlme_B=predlme_B, predlme_C=predlme_C)
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Design) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Design),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=col_Design)+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_2$mu.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_2))
ranef(getSmo(gamlss_NBI_2))
gamlss_NBI_log_design$sigma.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_log_design, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_design, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_design, what ="sigma"))
\begin{equation*}
P(Y=y|\mu, \sigma)= \frac{\Gamma \left( \frac{y+1}{\sigma} \right)}{\gamma \left( \frac{1}{\sigma} \right)} \gamma \left( \frac{1}{\sigma}\right) \Gamma (y+1) \left(\frac{(\sigma  \mu)}{ (1+\sigma \mu)} \right)^y \left( \frac{1}{1+\sigma \mu}\right)^{1/\sigma}
\end{equation*}
CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50, cache = TRUE)
fmeans_A_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_mu <- exp(predict(gamlss_NBI_2, newdata = data.frame(Cellnumber = CN, Design ="C")))
fmeans_A_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="A")))
fmeans_B_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="B")))
fmeans_C_s <- exp(predict(gamlss_NBI_2, what ="sigma",newdata = data.frame(Cellnumber = CN, Design ="C")))
View(sample_annotation_mESC)
sample_annotation_mESC$Date <- "July"
sample_annotation_mESC$Date[(sample_annotation_mESC$Design=="A"|sample_annotation_mESC$Design=="B" )]<-"November"
gamlss_NBI_log_date <-gamlss(TotalUMIs_DS_dG ~ log(Cellnumber) +re(random=~1|Date), sigma.formula =~ log(Cellnumber) +re(random=~1|Date) ,
data =sample_annotation_mESC, family = NBI, method = mixed(10,50))
sample_annotation_mESC$predlme = exp(predict(gamlss_NBI_log_date))
# CN<- c(1,2,3,4,5,7,10,12,15,17,20,30,40,50)
# predlme_July <- exp(predict(gamlss_NBI_log_design, newdata = data.frame(Cellnumber = CN, Date ="July")))
# predlme_November <- exp(predict(gamlss_NBI_log_design, newdata = data.frame(Cellnumber = CN, Date ="November")))
# newdata <- data.frame(Cellnumber = CN, predlme_July=predlme_July, predlme_November=predlme_November, )
ggplot(sample_annotation_mESC,
aes(x = Cellnumber, y = TotalUMIs_DS_dG, color = Date) ) +
geom_point(mapping = aes(x= Cellnumber, y = TotalUMIs_DS_dG, col = Date),
data=sample_annotation_mESC)+
geom_smooth(data = sample_annotation_mESC, aes(x=Cellnumber, y = predlme),
size = 1,se=FALSE)+
scale_color_manual(values=c(col_Date[2],col_Date[1]))+
ggtitle("GAMLSS Negative Binomial Regression ") +
labs(y="Total UMIs", col ="Design")
gamlss_NBI_log_date$mu.coefSmo[[1]]$coefficients
ranef(getSmo(gamlss_NBI_log_design))
coef(getSmo(gamlss_NBI_log_date))
gamlss_NBI_log_date$sigma.coefSmo[[1]]$coefficients
coef(getSmo(gamlss_NBI_log_date, what ="sigma"))
ranef(getSmo(gamlss_NBI_log_date, what ="sigma"))
xlim_all <- c(rep(300000,6),rep(600000,3), rep(1000000,3),rep(2000000,2))
par(mfrow=c(1,1))
for(i in CN){
k <- which(i==CN)[1]
hist(sample_annotation_mESC$TotalUMIs_DS_dG[sample_annotation_mESC$Cellnumber==i],  breaks = 20, freq = FALSE, main = paste(bquote(.(i)), " Cells)"), xlab = "Cellnumber", "Density", xlim =c(0,xlim_all[k]))
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_July_mu[k], sigma= fmeans_July_s[k]), col = col_Date[1])
lines(0:xlim_all[k],dNBI(0:xlim_all[k], mu= fmeans_November_mu[k], sigma= fmeans_November_s[k]), col = col_Date[2])
legend("topright", legend=c("July", "November"), col=col_Date, lty=1, cex=0.8)
}
stochprofML::: comb.summands
stochprofML:::comb.summands
?stochprofML::comb.summands
??stochprofML::comb.summands
??stochprofML:::comb.summands
install.packages("devtools")
install_github("fichslab/stochprofML")
install_github("fuchslab/stochprofML")
library(devtools)
install_github("fuchslab/stochprofML")
library(stochprofML)
stochprofML:::comb.summands()
stochprofML:::comb.summands(5,3)
stochprofML:::comb.summands(5,2)
install.packages("umap")
install.packages("sva")
install.packages("sva")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
ggplot(data=sample_annotation_mESC_AB, aes(x=Cellnumber , y = TotalUMIs_DS_dG, col = Date)) +
ggtitle("Linear regression for design A and B") +
geom_point(mapping = aes(col = Date)) +
labs(y="Total UMIs", col ="Design") +
scale_color_manual(values=col_Date)+
geom_smooth(method = lm,se=FALSE)
install.packages(""broom.mixed"")
install.packages(broom.mixed)
install.packages("broom.mixed")
library("broom.mixed")
?lmer
??lmer
d <- readRDS("J:/190905Backup/Eigene Dokumente/Thesis/Notizen/2018_NB_Overleaf/Probability_distributions_for_single-cell_mRNA_counts/RealWorldData/Nestorowa/Nestorowa.rds")
id <- "Rn18s-rs5"
install_github("fuchslab/scModels/tree/createPIG")
library(devtools)
install_github("fuchslab/scModels/tree/createPIG")
install_github("fuchslab/scModels", ref"createPIG")
install_github("fuchslab/scModels", ref="createPIG")
stochprofML::stochasticProfilingData()
set.seed(2020)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.52, 0.48)
mu <- c(0.09,-1.48)
sigma <- 0.02
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.52, 0.48)
mu <- c(0.09,-1.48)
sigma <- 0.02
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
set.seed(10)
stochprofML::stochasticProfilingData()
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.62, 0.38)
mu <- c(0.47, -0.87)
sigma <- 0.03
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
gen_LNLN
#setwd("C:/Users/lisa.amrhein/Documents/stochProfML/Simulationsstudien")
setwd("J:/StochProfPaper/Pics/Code")
library(stochprofML)
set.seed(10)
k <- 100
n <- 10
TY <- 2
p <- c(0.62, 0.38)
mu <- c(0.47, -0.87)
sigma <- 0.03
gen_LNLN <- r.sum.of.mixtures.LNLN(k, n, p, mu, rep(sigma,TY))
gen_LNLN
pdf(paste0( "Simulated_Gene.pdf"),  width = 7, height = 4)
x <- seq(round(min(gen_LNLN)), round(max(gen_LNLN)),
(round(max(gen_LNLN)) - round(min(gen_LNLN))) / 500)
y <- d.sum.of.mixtures.LNLN(x, n, p, mu,rep(sigma,TY), logdens=F)
hist(gen_LNLN, main = paste("Simulated Gene"), breaks = 50,
xlab = "Sum of mixtures of lognormals", ylab = "Density",
freq = F, col = "lightgrey")
lines(x,y,col="blue",lwd=3)
dev.off()
set.seed(20)
result <- stochprof.loop("LN-LN", matrix(gen_LNLN,ncol = 1), n, TY,
genenames = "SimGene", fix.mu = F, loops = 10,
until.convergence=F, print.output = F, show.plots = T,
plot.title = "Simulated Gene",	use.constraints = F)
set.seed(20)
result <- stochprof.loop("LN-LN", matrix(gen_LNLN,ncol = 1), n, TY,
genenames = "SimGene", fix.mu = F, loops = 10,
until.convergence=F, print.output = F, show.plots = T,
plot.title = "Simulated Gene",	use.constraints = F)
set.seed(20)
stochasticProfilingML()
setwd("D:/Users/lisa.amrhein/Documents")
set.seed(20)
stochasticProfilingML()
set.seed(20)
stochasticProfilingML()
set.seed(20)
stochasticProfilingML()
matrix(c(2,2,3,3),nco=2)
matrix(c(2,2,3,3),nco=2)^c(1,2,3,4,5,6,7,8)
c(2,2,3,3)^c(1,2,3,4,5,6,7,8)
c(1,1,2,2)^c(1,2,3,4,5,6,7,8)
matrix(c(2,2,3,3),ncol=2)*matrix(c(2,2,3,3),ncol=2)
matrix(c(2,2,3,3),ncol=2)%*%matrix(c(2,2,3,3),ncol=2)
library(stochprofML)
?stochasticProfilingML()
stochasticProfilingML()
library(stochprofML)
?r.sum.of.mixtures.LNLN
set.seed(10)
k <- 1000
n <- 10
TY <- 2
p <- c(0.62, 0.38)
mu <- c(0.47, -0.87)
sigma <- 0.03
gene_LNLN <- r.sum.of.mixtures.LNLN(k = k, n, p, mu, rep(sigma, TY))
head(gene_LNLN)
set.seed(20)
result <- stochprof.loop(model = "LN-LN",
dataset = matrix(gene_LNLN, ncol = 1), n = n, TY = TY,
genenames = "SimGene", fix.mu = FALSE, loops = 10,
until.convergence = FALSE, print.output = FALSE, show.plots = TRUE,
plot.title = "Simulated Gene",	use.constraints = FALSE)
setwd("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction")
load("Dataset_1_all.rda")
dt <- data.frame(c("estimated Parameter","original Parameter with p"), c(True.predictions_wp[i],True.predictions.orig_wp[i]), c(paste(bquote(.(True.predictions.MLE_wp[i]))," (",bquote(.(True.predictions.MLE_HPI_wp[i])) ,")", sep=""),paste(bquote(.(True.predictions.MLE.orig_wp[i]))," (",bquote(.(True.predictions.MLE_HPI.orig_wp[i])) ,")", sep="") )
)
i <- 1
dt <- data.frame(c("estimated Parameter","original Parameter with p"), c(True.predictions_wp[i],True.predictions.orig_wp[i]), c(paste(bquote(.(True.predictions.MLE_wp[i]))," (",bquote(.(True.predictions.MLE_HPI_wp[i])) ,")", sep=""),paste(bquote(.(True.predictions.MLE.orig_wp[i]))," (",bquote(.(True.predictions.MLE_HPI.orig_wp[i])) ,")", sep="") )
)
dt
dt <- data.frame(c("Observation 1","Observation 2","Observation 3","Observation 4","Observation 5","Observation 6"),  round(Predic_wp[[1]][1:6,1],2), N.matrix[1:6,1])
names(dt)<- c("Observation", "estimated Parameter wit p: Mean" ,"True Value")
kable(dt)
dt
dt <- data.frame(c("Observation 1","Observation 2","Observation 3","Observation 4","Observation 5","Observation 6"),  paste(bquote(.(MLE.orig_wp[[1]][1:6,1],2) ) , " (", bquote(.(HPI.orig_l_wp[[1]][1:6,1],2) ), ",", bquote(.(HPI.orig_u_wp[[1]][1:6,1],2) ),")", sep =""), N.matrix[1:6,1])
names(dt)<- c("Observation", "true Parameter without p: MLE (95% HPI)", "True Value")
dt
dt <- data.frame(c("estimated Parameter","original Parameter with p"), c(True.predictions_wp[i],True.predictions.orig_wp[i]), c(paste(bquote(.(True.predictions.MLE_wp[i]))," (",bquote(.(True.predictions.MLE_HPI_wp[i])) ,")", sep=""),paste(bquote(.(True.predictions.MLE.orig_wp[i]))," (",bquote(.(True.predictions.MLE_HPI.orig_wp[i])) ,")", sep="") )
)
names(dt)<- c("Method","Exp Value", "MLE Genes (95% HPI)")
dt
True.predictions_wp[i]
head(Predic_wp[[i]])
head(N.matrix)
head(round(Predic_wp[[i]],0)== N.matrix)
round(Predic_wp[[i]],0)
