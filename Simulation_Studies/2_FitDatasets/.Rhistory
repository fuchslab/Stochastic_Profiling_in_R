mtext(expression(mu[2]), side = 2, line = 3, las = 1, cex = 1.5)
lines(c(0.6, 1.4), c(0, 0), col = "#FF7F00", lw = 2, lty = 2)
lines(c(0.6, 1.4), c(mu_2_set1$mu_2[7001], mu_2_set1$mu_2[7001]), col = "#1F78B4",
lw = 2, lty = 2)
lines(c(1.6, 2.4), c(0, 0), col = "#FF7F00", lw = 2, lty = 2)
lines(c(1.6, 2.4), c(mu_2_set1$mu_2[8001], mu_2_set1$mu_2[8001]), col = "#1F78B4",
lw = 2, lty = 2)
axis(side = 1, at = c(1, 2), c("Pool:
1-2-5-10
cells", "Pool:
10-15-20-50
cells"),
cex.axis = 1.3, tick = FALSE, outer = TRUE)
vioplot::vioplot(list(sigma_mix1$sigma, sigma_mix2$sigma), names = c(""), main = "",
yaxt = "n", ylab = "", col = "lightgrey", ylim = c(0, 1.4))
axis(side = 2, at = seq(0, 1.4, by = 0.2), seq(0, 1.4, by = 0.2), cex.axis = 1.3,
las = 1)
mtext(expression(sigma), side = 2, line = 3, las = 1, cex = 1.5)
lines(c(0.6, 1.4), c(0.2, 0.2), col = "#FF7F00", lw = 2, lty = 2)
lines(c(0.6, 1.4), c(sigma_set1$sigma[7001], sigma_set1$sigma[7001]), col = "#1F78B4",
lw = 2, lty = 2)
lines(c(1.6, 2.4), c(0.2, 0.2), col = "#FF7F00", lw = 2, lty = 2)
lines(c(1.6, 2.4), c(sigma_set1$sigma[8001], sigma_set1$sigma[8001]), col = "#1F78B4",
lw = 2, lty = 2)
axis(side = 1, at = c(1, 2), c("Pool:
1-2-5-10
cells", "Pool:
10-15-20-50
cells"),
cex.axis = 1.3, tick = FALSE, outer = TRUE)
legend(x = 0.5, y = 1.7, legend = c("true value", "estimate with true n-vetor"),
lty = c(2, 2), col = c("#FF7F00", "#1F78B4"), bty = "n", xpd = NA, cex = 1.3)
title(paste0("Parameter estimates for 1000 datasets"), outer = TRUE, cex.main = 2)
OVL_LN_LN <- function(mu_1,mu_2,sigma_1,sigma_2){
f1 <- function(x){dlnorm(x, meanlog = mu_1, sdlog = sigma_1) }
f2 <- function(x){dlnorm(x, meanlog = mu_2, sdlog = sigma_2) }
f3 <- function(x){pmin(f1(x), f2(x))}
integrate( f3, lower = 0.000001, upper = Inf)$value
}
###################################################################################################
# function to label subplots:
# function found at: https://logfc.wordpress.com/2017/03/15/adding-figure-labels-a-b-c-in-the-top-left-corner-of-the-plotting-region/
fig_label <- function(text, region = "figure", pos = "topleft", cex = NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from = "in", to = "user")
y <- grconvertY(c(0, ds[2]), from = "in", to = "user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex = cex) * 60/100
sh <- strheight(text, cex = cex) * 60/100
x1 <- switch(pos,
topleft = x[1] + sw,
left = x[1] + sw,
bottomleft = x[1] + sw,
top = (x[1] + x[2])/2,
center = (x[1] + x[2])/2,
bottom = (x[1] + x[2])/2,
topright = x[2] - sw,
right = x[2] - sw,
bottomright = x[2] - sw)
y1 <- switch(pos,
topleft = y[2] - sh,
top = y[2] - sh,
topright = y[2] - sh,
left = (y[1] + y[2])/2,
center = (y[1] + y[2])/2,
right = (y[1] + y[2])/2,
bottomleft = y[1] + sh,
bottom = y[1] + sh,
bottomright = y[1] + sh)
old.par <- par(xpd = NA)
on.exit(par(old.par))
text(x1, y1, text, cex = cex, ...)
return(invisible(c(x,y)))
}
mu_1 <- 2
mu_2 <- 2.7
sigma_1 <- 0.25
sigma_2 <- 0.2
x <- seq(0.1, 40, by = 0.1)
Distribution1 <- dlnorm(x, meanlog = mu_1, sdlog = sigma_1)
Distribution2 <- dlnorm(x, meanlog = mu_2, sdlog = sigma_2)
Overlap_1_2 <- OVL_LN_LN(mu_1, mu_2, sigma_1, sigma_2)
par(mfrow = c(2, 2))
plot(x, Distribution1, type = "l", col = "#FF7F00", lwd = 3, main = paste("Overlap area:", round(bquote(.(Overlap_1_2))*100, 0), "%"), xlab = "Measurements", ylab = "Density", bty = "n")
lines(x, Distribution2, col = "#1F78B4", lwd = 3)
polygon(x, c(pmin(Distribution1, Distribution2)), col = "#FF7F00", border = NA)
polygon(x, c(pmin(Distribution1, Distribution2)), col = "#1F78B4", angle = 45, dens = 50, border = NA, lwd = 1)
lines(x, Distribution1, col = "#FF7F00", lwd = 3)
lines(x, Distribution2, col = "#1F78B4", lwd = 3)
legend("topright", c( expression(paste("LN(", mu[1], " = 2.00, ", sigma[1], " = 0.25)")), expression(paste("LN(", mu[2], " = 2.70, ", sigma[2], " = 0.20)")) ), col = c("#FF7F00", "#1F78B4"), lwd = c(3, 3), bty = "n")
fig_label("A", cex = 2)
mu_3 <- 1.75
mu_4 <- 2.09
sigma_3 <- 0.19
sigma_4 <- 0.21
x <- seq(0.1, 40, by = 0.1)
Distribution3 <- dlnorm(x, meanlog = mu_3, sdlog = sigma_3)
Distribution4 <- dlnorm(x, meanlog = mu_4, sdlog = sigma_4)
Overlap_3_4 <- OVL_LN_LN(mu_3, mu_4, sigma_3, sigma_4)
plot(x, Distribution3, type = "l", col = "#FF7F00", lwd = 3, main = paste("Overlap area:", round(bquote(.(Overlap_3_4))*100, 0), "%"), xlab = "Measurements", ylab = "Density", bty = "n")
lines(x, Distribution4, col = "#1F78B4", lwd = 3)
polygon(x, c(pmin(Distribution3, Distribution4)), col = "#FF7F00", border = NA)
polygon(x, c(pmin(Distribution3, Distribution4)), col = "#1F78B4", angle = 45, dens = 50, border = NA, lwd = 1)
lines(x, Distribution3, col = "#FF7F00", lwd = 3)
lines(x, Distribution4, col = "#1F78B4", lwd = 3)
legend("topright", c( expression(paste("LN(", mu[1], " = 1.75, ", sigma[1], " = 0.19)")), expression(paste("LN(", mu[2], " = 2.09, ", sigma[2], " = 0.21)")) ), col = c("#FF7F00", "#1F78B4"), lwd = c(3, 3), bty = "n")
fig_label("B", cex = 2)
mu_5 <- 1.89
mu_6 <- 2.07
sigma_5 <- 0.21
sigma_6 <- 0.25
x <- seq(0.1, 40, by = 0.1)
Distribution5 <- dlnorm(x, meanlog = mu_5, sdlog = sigma_5)
Distribution6 <- dlnorm(x, meanlog = mu_6, sdlog = sigma_6)
Overlap_5_6 <- OVL_LN_LN(mu_5, mu_6, sigma_5, sigma_6)
plot(x, Distribution5, type = "l", col = "#FF7F00", lwd = 3, main = paste("Overlap area:", round(bquote(.(Overlap_5_6))*100, 0), "%"), xlab = "Measurements", ylab = "Density", bty = "n")
lines(x, Distribution6, col = "#1F78B4", lwd = 3)
polygon(x, c(pmin(Distribution5, Distribution6)), col = "#FF7F00", border = NA)
polygon(x, c(pmin(Distribution5, Distribution6)), col = "#1F78B4", angle = 45, dens = 50, border = NA, lwd = 1)
lines(x, Distribution5, col = "#FF7F00", lwd = 3)
lines(x, Distribution6, col = "#1F78B4", lwd = 3)
legend("topright", c( expression(paste("LN(", mu[1], " = 1.89, ", sigma[1], " = 0.21)")), expression(paste("LN(", mu[2], " = 2.07, ", sigma[2], " = 0.25)")) ), col = c("#FF7F00", "#1F78B4"), lwd = c(3, 3), bty = "n")
fig_label("C", cex = 2)
mu_7 <- 2.1
mu_8 <- 2.03
sigma_7 <- 0.19
sigma_8 <- 0.2
x <- seq(0.1, 40, by = 0.1)
Distribution7 <- dlnorm(x, meanlog = mu_7, sdlog = sigma_7)
Distribution8 <- dlnorm(x, meanlog = mu_8, sdlog = sigma_8)
Overlap_7_8 <- OVL_LN_LN(mu_7, mu_8, sigma_7, sigma_8)
plot(x, Distribution7, type = "l", col = "#FF7F00", lwd = 3, main = paste("Overlap area:", round(bquote(.(Overlap_7_8))*100, 0), "%"), xlab = "Measurements", ylab = "Density", bty = "n")
lines(x, Distribution8, col = "#1F78B4", lwd = 3)
polygon(x, c(pmin(Distribution7, Distribution8)), col = "#FF7F00", border = NA)
polygon(x, c(pmin(Distribution7, Distribution8)), col = "#1F78B4", angle = 45, dens = 50, border = NA, lwd = 1)
lines(x, Distribution7, col = "#FF7F00", lwd = 3)
lines(x, Distribution8, col = "#1F78B4", lwd = 3)
legend("topright", c( expression(paste("LN(", mu[1], " = 2.10, ", sigma[1], " = 0.19)")), expression(paste("LN(", mu[2], " = 2.03, ", sigma[2], " = 0.20)")) ), col = c("#FF7F00", "#1F78B4"), lwd = c(3, 3), bty = "n")
fig_label("D", cex = 2)
library(MASS)
# 60 und 200
n1 <- 60
n2 <- 200
# 60 und 60
n3 <- 60
n4 <- 60
par(mfrow=c(1, 2))
repeat_I <- 1000
mu_A_D <- 2.1
mu_B_D <- 2.03
sigma_A_D <- 0.19
sigma_B_D <- 0.2
OVL_D <- OVL_LN_LN(mu_A_D, mu_B_D, sigma_A_D, sigma_B_D)
# Case D_60_200
# generate new datasets
A_D_1 <- list()
B_D_1 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_1[[i]] <- rlnorm(n1, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D, sigma_B_D)))
B_D_1[[i]] <- rlnorm(n2, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D, sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_1 <- list()
Para_B_D_1 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_1[[i]] <- fitdistr(A_D_1[[i]], "lognormal")$estimate
Para_B_D_1[[i]] <- fitdistr(B_D_1[[i]], "lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_1_all <- c()
for(i in 1:repeat_I){
OVL_D_1_all[i] <- OVL_LN_LN(Para_A_D_1[[i]][1],Para_B_D_1[[i]][1], Para_A_D_1[[i]][2], Para_B_D_1[[i]][2])
}
Sort_OVL_D_1 <- sort(OVL_D_1_all)
OVL_D_1_95 <- Sort_OVL_D_1[round(length(Sort_OVL_D_1) - length(Sort_OVL_D_1) * 0.95)]
hist_D_1 <- hist(OVL_D_1_all, breaks = 100, plot = FALSE)
dev.off()
hist_D_1 <- hist(OVL_D_1_all, breaks = 100, plot = FALSE)
hist(OVL_D_1_all, breaks = 100, col = c(rep("grey", sum(hist_D_1$breaks < OVL_D_1_95)), rep("black", sum(hist_D_1$breaks >= OVL_D_1_95))),
border = c(rep("grey", sum(hist_D_1$breaks < OVL_D_1_95)), rep("black",sum(hist_D_1$breaks >= OVL_D_1_95))),
xlab = "Overlap", main = "60 and 200 single-cells")
lines(x = rep(OVL_D, 2), y = c(0, 1000), col = "#89BBBF", lwd = 3)
# Case D_60_60
# generate new datasets
A_D_2 <- list()
B_D_2 <- list()
set.seed(940)
for(i in 1:repeat_I){
A_D_2[[i]] <- rlnorm(n3, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D, sigma_B_D)))
B_D_2[[i]] <- rlnorm(n4, meanlog = mean(c(mu_A_D, mu_B_D)), sdlog = mean(c(sigma_A_D, sigma_B_D)))
}
# fit Parameter for each dataset
Para_A_D_2 <- list()
Para_B_D_2 <- list()
set.seed(943)
for(i in 1:repeat_I){
Para_A_D_2[[i]] <- fitdistr(A_D_2[[i]], "lognormal")$estimate
Para_B_D_2[[i]] <- fitdistr(B_D_2[[i]], "lognormal")$estimate
}
# Calculate Overlap for each pair
OVL_D_2_all <- c()
for(i in 1:repeat_I){
OVL_D_2_all[i] <- OVL_LN_LN(Para_A_D_2[[i]][1], Para_B_D_2[[i]][1], Para_A_D_2[[i]][2], Para_B_D_2[[i]][2])
}
Sort_OVL_D_2 <- sort(OVL_D_2_all)
OVL_D_2_95 <- Sort_OVL_D_2[round(length(Sort_OVL_D_2) - length(Sort_OVL_D_2) * 0.95)]
hist_D_2 <- hist(OVL_D_2_all, breaks = 100, plot = FALSE)
hist(OVL_D_2_all, breaks = 100, col = c(rep("grey", sum(hist_D_2$breaks < OVL_D_2_95)), rep("black", sum(hist_D_2$breaks >= OVL_D_2_95))),
border = c(rep("grey", sum(hist_D_2$breaks < OVL_D_2_95)), rep("black", sum(hist_D_2$breaks >= OVL_D_2_95))),
xlab = "Overlap", main = "60 and 60 single-cells")
lines(x = rep(OVL_D, 2), y = c(0, 1000), col = "#89BBBF", lwd = 3)
# load packages
library("stochprofML")
library("ggplot2")
library("knitr")
library("RColorBrewer")
library("cowplot")
#######################################
# define functions needed later
get_legend <- function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
ci <- function(probs_distr, j.vec.all , ci_p){
pos <- which.max(probs_distr)
MLE <- j.vec.all[pos,]
MLE_v <- probs_distr[pos]
ci_v <- MLE_v
pos_l <- pos
pos_u <- pos
while(ci_v < ci_p){
if(pos_l > 1 & pos_u < length(probs_distr)){
pos_l_temp <- pos_l-1
pos_u_temp <- pos_u + 1
prob_l_temp <- probs_distr[pos_l_temp]
prob_u_temp <- probs_distr[pos_u_temp]
decision <- which.max(c(prob_l_temp, prob_u_temp))
if(decision == 1) pos_l <- pos_l_temp else pos_u <- pos_u_temp
if(decision == 1) ci_v <-ci_v + prob_l_temp else ci_v <- ci_v + prob_u_temp
} else if(pos_l > 1 & pos_u == length(probs_distr)){
pos_l <- pos_l - 1
ci_v <- ci_v + probs_distr[pos_l]
} else if(pos_u < length(probs_distr)){
pos_u <- pos_u + 1
ci_v <- ci_v + probs_distr[pos_u]
}
}
return(list("CI" = ci_v, "MLE" = MLE, "CI_l" = j.vec.all[pos_l, ], "CI_u" = j.vec.all[pos_u, ]))
}
###################################################################################################
p.combo.sum.of.mix <- function(y, n, p.vector.est = FALSE, mu.vector.est, sigma.vector.est){
p.vector.est.is <- p.vector.est
p.vector.est.is <- is.numeric(p.vector.est.is)
j.combis <- stochprofML:::comb.summands(n, length(mu.vector.est))
Dens_j <- matrix(ncol = dim(j.combis)[1], nrow = length(y))
#p.vector not needed
if(p.vector.est.is == FALSE){
for(i in 1 : nrow(j.combis)) {
Dens_j[, i] <-  stochprofML:::d.sum.of.types.LNLN(y, j.combis[i, ], mu.vector.est, sigma.vector.est, logdens = FALSE)
}
Prob_j <- Dens_j / rowSums(Dens_j)
}else{
for (i in 1 : nrow(j.combis))  {
weight <- dmultinom(x = j.combis[i, ], prob = p.vector.est,log =  FALSE)
mixture.density <- stochprofML:::d.sum.of.types.LNLN(y, j.combis[i, ], mu.vector.est, sigma.vector.est, logdens = FALSE)
Dens_j[, i] <- weight * mixture.density
}
Prob_j <- Dens_j/rowSums(Dens_j)
}
return(list("Prob_j" = Prob_j, "Dens_j" = Dens_j))
}
well.prediction <- function(dataset, k, n, p.vector, mu.vector, sigma.vector, N.matrix,set_a_seed, save_name){
estimated.parameter <- list()
TY <- length(p.vector)
set.seed(set_a_seed)
estimated.parameter[[1]] <- stochprof.loop(model=model, dataset = t(dataset[1, , drop = FALSE]), n = n, TY = TY, print.output = FALSE, show.plots = FALSE)
j.vector.all <- stochprofML:::comb.summands(n = n, k = TY)
#calculate all necessary densities
dens.all <- list()
i <- 1
x <- seq(round(min(dataset[i, ])), round(max(dataset[i,])), length.out = 200)
dens.all[[i]] <- matrix(nrow = 2 * dim(j.vector.all)[1] + 3, ncol = length(x))
# value where densities are evaluated
dens.all[[i]][1, ] <- x
# densities at all values for estimated parameters
dens.all[[i]][2, ] <- stochprofML:::d.sum.of.mixtures.LNLN(x, n, c(estimated.parameter[[i]]$mle[1], (1 - estimated.parameter[[i]]$mle[1])),
c(estimated.parameter[[i]]$mle[2], estimated.parameter[[i]]$mle[3]),
rep(estimated.parameter[[i]]$mle[4], TY), logdens = FALSE)
# conditional densities at all values for estimated parameters conditioned on well composition
for (j in 1 : nrow(j.vector.all)){
dens.all[[i]][j + 2, ] <- stochprofML:::d.sum.of.types.LNLN(x, j.vector = j.vector.all[j, ], mu.vector = c(estimated.parameter[[i]]$mle[2],
estimated.parameter[[i]]$mle[3]), sigma.vector = rep(estimated.parameter[[i]]$mle[4], TY),
logdens = FALSE)
}
# densities at all values for true parameters
dens.all[[i]][nrow(j.vector.all) + 3, ] <- stochprofML:::d.sum.of.mixtures.LNLN(x, n, p.vector, mu.vector, sigma.vector, logdens = FALSE)
# conditional densities at all values for true parameters conditioned on well composition
for (j in 1 : nrow(j.vector.all)){
dens.all[[i]][j + nrow(j.vector.all) + 3, ]<- stochprofML:::d.sum.of.types.LNLN(x, j.vector = j.vector.all[j, ],
mu.vector = mu.vector, sigma.vector = sigma.vector, logdens = FALSE)
}
# Calculate all conditional densities for all possible well compositions for estimated and true
# parameters for all measurements
cond.dens.prob.all_wp <- list()
cond.dens.prob.all.orig_wp <- list()
for (j in 1 : nrow(j.vector.all)){
cond.dens.prob.all_wp[[i]] <- p.combo.sum.of.mix(y = t(dataset[i, , drop = FALSE]), n, p.vector.est = c(estimated.parameter[[i]]$mle[1],
(1 - estimated.parameter[[i]]$mle[1])), mu.vector.est = c(estimated.parameter[[i]]$mle[2],
estimated.parameter[[i]]$mle[3]), sigma.vector.est=  rep(estimated.parameter[[i]]$mle[4], TY))
cond.dens.prob.all.orig_wp[[i]] <- p.combo.sum.of.mix(y = t(dataset[i, , drop = FALSE]), n,
p.vector.est = p.vector, mu.vector.est = mu.vector, sigma.vector.est = sigma.vector)
}
# Predict Cell Combos
Predic_wp <- list()
MLE_wp <- list()
CI_v_wp <- list()
CI_l_wp <- list()
CI_u_wp <- list()
Predic_wp[[i]] <- matrix(nrow = ncol(dataset[i, , drop =FALSE]), ncol = ncol(j.vector.all))
MLE_wp[[i]] <- matrix(nrow = ncol(dataset[i, , drop =FALSE]), ncol = ncol(j.vector.all))
CI_l_wp[[i]] <- matrix(nrow = ncol(dataset[i, , drop =FALSE]), ncol = ncol(j.vector.all))
CI_u_wp[[i]] <- matrix(nrow = ncol(dataset[i, , drop =FALSE]), ncol = ncol(j.vector.all))
CI_v_wp[[i]] <- matrix(nrow = ncol(dataset[i, , drop =FALSE]), ncol = 1)
for (j in 1 : ncol(dataset[i, , drop = FALSE])){
Predic_wp[[i]][j, ] <- colSums(j.vector.all * cond.dens.prob.all_wp[[i]]$Prob_j[j, ])
mle_ci95_wp <- ci(probs_distr = cond.dens.prob.all_wp[[i]]$Prob_j[j, ], j.vec.all = j.vector.all, ci_p = 0.95)
MLE_wp[[i]][j, ] <- j.vector.all[which.max(cond.dens.prob.all_wp[[i]]$Prob_j[j, ]), ]
CI_l_wp[[i]][j, ] <- mle_ci95_wp$CI_l
CI_u_wp[[i]][j, ] <- mle_ci95_wp$CI_u
CI_v_wp[[i]][j, ] <- mle_ci95_wp$CI
}
# same for original parameters
Predic.orig_wp <- list()
MLE.orig_wp <- list()
CI.orig_v_wp <- list()
CI.orig_l_wp <- list()
CI.orig_u_wp <- list()
Predic.orig_wp[[i]] <- matrix(nrow = ncol(dataset[i, ,drop = FALSE]), ncol = ncol(j.vector.all))
MLE.orig_wp[[i]] <- matrix(nrow = ncol(dataset[i, ,drop = FALSE]), ncol = ncol(j.vector.all))
CI.orig_l_wp[[i]] <- matrix(nrow = ncol(dataset[i, ,drop = FALSE]), ncol = ncol(j.vector.all))
CI.orig_u_wp[[i]] <- matrix(nrow = ncol(dataset[i, ,drop = FALSE]), ncol = ncol(j.vector.all))
CI.orig_v_wp[[i]] <- matrix(nrow = ncol(dataset[i, ,drop = FALSE]), ncol = 1)
for (j in 1 : ncol(dataset[i, ,drop = FALSE])){
Predic.orig_wp[[i]][j, ] <- colSums(j.vector.all * cond.dens.prob.all.orig_wp[[i]]$Prob_j[j,])
mle_ci95.orig_wp <- ci(probs_distr = cond.dens.prob.all.orig_wp[[i]]$Prob_j[j, ], j.vec.all = j.vector.all, ci_p = 0.95)
MLE.orig_wp[[i]][j, ] <- j.vector.all[which.max(cond.dens.prob.all.orig_wp[[i]]$Prob_j[j, ]), ]
CI.orig_l_wp[[i]][j, ] <- mle_ci95.orig_wp$CI_l
CI.orig_u_wp[[i]][j, ] <- mle_ci95.orig_wp$CI_u
CI.orig_v_wp[[i]][j, ] <- mle_ci95.orig_wp$CI
}
# Check how often the true combo gets predicted
True.predictions_wp <- c()
True.predictions.orig_wp <- c()
True.predictions_wp[i] <- sum(round(Predic_wp[[i]], 0) == N.matrix) / ncol(N.matrix)
True.predictions.orig_wp[i] <- sum(round(Predic.orig_wp[[i]], 0)== N.matrix) / ncol(N.matrix)
# Check how often the true combo gets predicted via MLE and how often it is contained in the interval
True.predictions.MLE_wp <- c()
True.predictions.MLE_CI_wp <- c()
True.predictions.MLE.orig_wp <- c()
True.predictions.MLE_CI.orig_wp <- c()
True.predictions.MLE_wp[i] <- sum(MLE_wp[[i]]== N.matrix)/ncol(N.matrix)
True.predictions.MLE_CI_wp[i] <-sum(CI_l_wp[[i]][,1]<= N.matrix[,1] &  N.matrix[,1]<= CI_u_wp[[i]][,1])
True.predictions.MLE.orig_wp[i] <- sum(MLE.orig_wp[[i]]== N.matrix)/ncol(N.matrix)
True.predictions.MLE_CI.orig_wp[i] <-sum(CI.orig_l_wp[[i]][,1]<= N.matrix[,1] &  N.matrix[,1]<= CI.orig_u_wp[[i]][,1])
# save all calculated values
save(p.vector, mu.vector, sigma.vector, k, n, set_a_seed, N.matrix, dataset, estimated.parameter,
j.vector.all, dens.all, cond.dens.prob.all_wp, Predic_wp,  True.predictions_wp, True.predictions.MLE_wp,
True.predictions.MLE_CI_wp, Predic_wp,  MLE_wp, CI_v_wp,  CI_l_wp, CI_u_wp, cond.dens.prob.all.orig_wp,
Predic.orig_wp ,MLE.orig_wp ,CI.orig_v_wp ,CI.orig_l_wp ,CI.orig_u_wp ,True.predictions.orig_wp,
True.predictions.MLE.orig_wp  ,True.predictions.MLE_CI.orig_wp , file = save_name)
}
p.vector_1 <- c(0.2, 0.8)
mu.vector_1 <- c(2, 0)
sigma.vector_1 <- c(0.2, 0.2)
k_1 <- 100  # number of measurement samples
n_1 <- 5  # the number of cells taken from each measurement sample
set_seeds_1 <- c(1234, 345)
# Generate dataset 1
library(stochprofML)
model <- "LN-LN"
set_a_seed <- set_seeds_1[1]
set.seed(set_a_seed)
N.matrix_1 <- t(rmultinom(n = k_1, size = n_1, prob = p.vector_1))
Dataset_1 <- matrix(ncol = k_1, nrow = 1)
set.seed(set_a_seed + 102)
Dataset_1[1, ] <- r.sum.of.mixtures.LNLN(k_1, n_1, p.vector_1, mu.vector_1, sigma.vector_1, N.matrix_1)
well.prediction(dataset = Dataset_1, k = k_1, n = n_1, p.vector = p.vector_1, mu.vector = mu.vector_1,
sigma.vector = sigma.vector_1, N.matrix = N.matrix_1, set_a_seed = set_seeds_1[2] + 102, save_name ="test.rda")
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Simulation_Studies/2_FitDatasets/test.rda")
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Simulation_Studies/2_FitDatasets/test.rda")
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction/Dataset_1_all.rda")
i <- 1
hist(dataset[i, ], xlab = "Measurements", main = paste("Histogram of simulated dataset "),
freq = FALSE, breaks = 100, cex=1.5)
lines(dens.all[[i]][1, ], dens.all[[i]][nrow(j.vector.all) + 3, ],col = "#FF7F00",lwd = 3)
lines(dens.all[[i]][1, ], dens.all[[i]][2, ],col = "#1F78B4", lwd = 3)
legend("topright", legend = c("Estimated density", "True density"), col = c("#1F78B4", "#FF7F00"), lwd = c(3, 3), bty = "n", cex = 1)
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction/Dataset_2_all.rda")
i <- 1
hist(dataset[i, ],xlab = "Measurements", main = paste("Histogram of simulated dataset "),
freq = FALSE, breaks = 100, cex = 1.5)
lines(dens.all[[i]][1, ], dens.all[[i]][nrow(j.vector.all) + 3, ], col = "#FF7F00", lwd = 3)
lines(dens.all[[i]][1, ], dens.all[[i]][2,], col = "#1F78B4", lwd = 3)
legend("topright", legend = c("Estimated density", "True density"), col = c("#1F78B4", "#FF7F00"), lwd = c(3,3), bty = "n", cex = 1)
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction/Dataset_1_all.rda")
title <- c()
for(i in 1 : 6) title[i] <- paste("Measurement ", i, ": y = ", bquote(.(round(dataset[1, i], 2))), sep = "")
dt_new <- data.frame("Prob" = c(cond.dens.prob.all_wp[[1]]$Prob_j[1:6, ], cond.dens.prob.all.orig_wp[[1]]$Prob_j[1:6,]),
"Obs"= rep(rep(title, 6), 2), "Nr_Pop1" = rep(sort(rep(0 : 5, 6)), 4), "Method" = sort(rep(c(1, 2), 36)),
"True_CN" = rep(N.matrix[1:6, 1], 12), "Pred_Truth" = (rep(sort(rep(0 : 5, 6)), 4) == rep(N.matrix[1:6, 1], 12)),
"Fill" = paste(sort(rep(c(1, 2), 36)), "_", (rep(sort(rep(0:5, 6)), 4) == rep(N.matrix[1:6, 1], 12))))
dt_new$fill_new <- as.factor(c("estimated parameters", "true composition", "true parameters", "true composition")[dt_new$Fill])
p1<- ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col =fill_new, size = fill_new )) +
geom_bar(position = "dodge", stat = "identity") +
scale_size_manual(values = c(0.5, 1.5, 0.5)) +
scale_colour_manual(values = c(brewer.pal(n = 8, name = "Paired")[c(2)], "#000000", brewer.pal(n = 8, name = "Paired")[c(8)],"#000000")) +
scale_fill_manual(values = brewer.pal(n = 8, name = "Paired")[c(2,8)], labels = c("estimated parameters", "true parameters")) +
ylab("Conditional probability") +
xlab("# cells of population 1") +
labs(fill = "Prediction with") +
scale_x_continuous(breaks=0 : 5, labels = 0 : 5) +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,face = "bold"),
strip.text.x = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour = "white", fill = "white")) +
facet_wrap(~Obs, nrow = 6)
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction/Dataset_2_all.rda")
title <- c()
for(i in 1 : 6) title[i] <- paste("Measurement ", i, ": y = ", bquote(.(round(dataset[1, i], 2))), sep = "")
dt_new <- data.frame("Prob" = c(cond.dens.prob.all_wp[[1]]$Prob_j[1 : 6,], cond.dens.prob.all.orig_wp[[1]]$Prob_j[1 : 6, ]),
"Obs" = rep(rep(title, 11), 2), "Nr_Pop1" = rep(sort(rep(0 : 10, 6)), 2), "Method" = sort(rep(c(1, 2), 66)),
"True_CN" = rep(N.matrix[1 : 6, 1], 22), "Pred_Truth" = (rep(sort(rep(0 : 10, 6)), 2) == rep(N.matrix[1 : 6, 1], 22)),
"Fill" = paste(sort(rep(c(1, 2), 66)), "_", (rep(sort(rep(0 : 10, 6)), 2) == rep(N.matrix[1 : 6, 1], 22))))
dt_new$fill_new <- as.factor(c("estimated parameters", "true composition", "true parameters", "true composition")[dt_new$Fill])
p2 <- ggplot(dt_new, aes(Nr_Pop1, Prob, fill = as.factor(Method), col = fill_new, size = fill_new)) +
geom_bar(position = "dodge", stat = "identity") +
scale_size_manual(values = c(0.5, 1.5, 0.5)) +
scale_colour_manual(values = c(brewer.pal(n = 8, name = "Paired")[c(2)], "#000000", brewer.pal(n = 8, name = "Paired")[c(8)], "#000000")) +
scale_fill_manual(values = brewer.pal(n = 8, name = "Paired")[c(2, 8)], labels = c("estimated parameters", "true parameters"))+
ylab("Conditional probability") +
xlab("# cells of population 1") +
labs(fill = "Prediction with") +
scale_x_continuous(breaks = 0 : 10, labels = 0 : 10)+
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
strip.text.x = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(colour = "white", fill = "white")) +
facet_wrap(~Obs, nrow = 6)
plot_grid(p1, p2, align = "h", ncol = 2, rel_widths = c(1.2, 2), labels = c("AUTO"), label_size = 24)
load("D:/Users/lisa.amrhein/ICB/NeueArbeit/Stochastic_Profiling_in_R/Well_Prediction/Dataset_1_all.rda")
i <- 1
dt <- data.frame(c("estimated Parameter", "original Parameter with p"), c(True.predictions_wp[i], True.predictions.orig_wp[i]),
c(paste(bquote(.(True.predictions.MLE_wp[i])), " (", bquote(.(True.predictions.MLE_CI_wp[i])), ")", sep=""),
paste(bquote(.(True.predictions.MLE.orig_wp[i])), " (", bquote(.(True.predictions.MLE_CI.orig_wp[i])), ")", sep=""))
)
names(dt)<- c("Method", "Exp Value", "MLE Genes (95% CI)")
kable(dt)
dt <- data.frame(c("Observation 1", "Observation 2", "Observation 3", "Observation 4", "Observation 5", "Observation 6"), round(Predic_wp[[1]][1 : 6, 1], 2), N.matrix[1 : 6, 1])
names(dt) <- c("Observation", "estimated Parameter wit p: Mean", "True Value")
kable(dt)
dt <- data.frame(c("Observation 1", "Observation 2", "Observation 3", "Observation 4", "Observation 5", "Observation 6"), paste(bquote(.(MLE_wp[[1]][1 : 6, 1], 2) ),
" (", bquote(.(CI_l_wp[[1]][1 : 6, 1], 2) ), ",", bquote(.(CI_u_wp[[1]][1 : 6, 1], 2) ),")", sep = ""), N.matrix[1 : 6, 1])
names(dt) <- c("Observation", "estimated Parameter with p: MLE (95% CI)", "True Value")
kable(dt)
dt <- data.frame(c("Observation 1", "Observation 2", "Observation 3", "Observation 4", "Observation 5", "Observation 6"), round(Predic.orig_wp[[1]][1 : 6, 1], 2), N.matrix[1 : 6, 1])
names(dt) <- c("Observation", "true Parameter with p: Mean", "True Value")
kable(dt)
dt <- data.frame(c("Observation 1", "Observation 2", "Observation 3", "Observation 4", "Observation 5", "Observation 6"), paste(bquote(.(MLE.orig_wp[[1]][1 : 6, 1], 2)),
" (", bquote(.(CI.orig_l_wp[[1]][1 : 6, 1], 2) ), ",", bquote(.(CI.orig_u_wp[[1]][1 : 6, 1], 2) ), ")", sep = ""), N.matrix[1 : 6, 1])
names(dt) <- c("Observation", "true Parameter without p: MLE (95% CI)", "True Value")
kable(dt)
load("D:/Users/lisa.amrhein/AppData/Local/Temp/Munich-Shape-District-Population.RData")
View(Shape)
View(District)
